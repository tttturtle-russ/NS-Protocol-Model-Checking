# 0 "injective-agreement.pml"
# 0 "<built-in>"
# 0 "<命令行>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<命令行>" 2
# 1 "injective-agreement.pml"



inline EnqueueRcvBuffer(msg) {
    receiveBuffer[(msg.num % 255)].num = msg.num;
    receiveBuffer[(msg.num % 255)].sender = msg.sender;
    receiveBuffer[(msg.num % 255)].receiver = msg.receiver;
    receiveBuffer[(msg.num % 255)].msg1 = msg.msg1;
    receiveBuffer[(msg.num % 255)].msg2 = msg.msg2;
    receiveBuffer[(msg.num % 255)].key = msg.key;
    printf("Enqueue Message:%d to receiveBuffer\n",(msg.num % 255));
}

inline EnqueueSendBuffer(msg) {
    sendBuffer[(msg.num % 255)].num = msg.num;
    sendBuffer[(msg.num % 255)].sender = msg.sender;
    sendBuffer[(msg.num % 255)].receiver = msg.receiver;
    sendBuffer[(msg.num % 255)].msg1 = msg.msg1;
    sendBuffer[(msg.num % 255)].msg2 = msg.msg2;
    sendBuffer[(msg.num % 255)].key = msg.key;
    printf("Enqueue Message:%d to sendBuffer\n",(msg.num % 255));
}

inline EQUAL(x,y) {
    x.num == y.num && x.sender == y.sender && x.receiver == y.receiver && x.msg1 == y.msg1 && x.msg2 == y.msg2 && x.key == y.key;
}

inline COPY(from,to) {
    to.num = from.num;
    to.sender = from.sender;
    to.receiver = from.receiver;
    to.msg1 = from.msg1;
    to.msg2 = from.msg2;
    to.key = from.key;
}


mtype:ID = {IDA,IDB,IDS};

mtype:KEY = {KPA,KPB,KPS};

mtype:DATA = {NA,NB,ANY};

mtype:VERIFY = {VA,VB,VS};

byte Num = 0;
bool AliceAgree = false;
bool BobAgree = false;
bool AliceSuccess = false;
bool BobSuccess = false;
typedef Message{
    byte num;
    mtype:ID sender,receiver;
    mtype:DATA msg1,msg2;
    mtype:KEY key;
}


chan ch = [0] of {mtype:ID, mtype:VERIFY,Message};


Message sendBuffer[255];
Message receiveBuffer[255];

proctype Alice () {
    mtype:ID sender,receiver;
    mtype:VERIFY verifier;
    mtype:KEY key;
    mtype:DATA nonce;
    Message outmsg,inmsg;


    atomic {
        receiver = IDS;
        key = KPS;
        verifier = VB;
    }

    atomic {
        outmsg.num = Num;
        outmsg.sender = IDA;
        outmsg.msg1 = NA;
        outmsg.msg2 = ANY;
        outmsg.receiver = receiver;
        outmsg.key = key;
        ch ! receiver,VA,outmsg;
        EnqueueSendBuffer(outmsg);
    }

    atomic {
        ch ? IDA,VB,inmsg;
    }

    atomic {
        if
        :: inmsg.msg1 != NA ->
            printf("Wrong Message\n");
        :: else -> nonce = inmsg.msg2;
        fi;
    }

    atomic {
        Num = Num + 1;
        outmsg.num = Num;
        outmsg.sender = IDA;
        outmsg.receiver = receiver;
        outmsg.msg1 = nonce;
        outmsg.msg2 = ANY;
        outmsg.key = key;
        ch ! receiver,VA,outmsg;
        EnqueueSendBuffer(outmsg);
    }
    AliceSuccess = true;

    byte cnt = 0;
    do
        ::atomic {
            for (cnt : 1 .. Num - 1){
                if
                    :: EQUAL(sendBuffer[cnt],receiveBuffer[cnt]) ->
                        goto err;
                    :: else -> skip;
                fi;
            }
        }
    od;
err:
    printf("Alice not agree with Bob\n");
end:

}

proctype Bob () {
    Message outmsg,inmsg;
    mtype:ID receiver;
    mtype:VERIFY verifier;
    mtype:KEY key;

    atomic {
        ch ? IDB,verifier,inmsg;
    }
    atomic {
        if
        :: inmsg.key != KPB ->
            printf("Wrong Public Key\n");
        :: else -> skip;
        fi;
        EnqueueRcvBuffer(inmsg);
    }

    atomic {
        if

        :: verifier == VA ->
            printf("Bob receive A's Message\n");
            key = KPA;
        :: else -> skip;
        fi;

        EnqueueRcvBuffer(inmsg);
        outmsg.num = inmsg.num;
        outmsg.sender = IDB;
        outmsg.receiver = IDS;
        outmsg.msg1 = inmsg.msg1;
        outmsg.msg2 = NB;
        outmsg.key = key;
        ch ! IDS,VB,outmsg;
    }

    atomic {
        ch ? IDB,verifier,inmsg;

        if
        :: inmsg.msg1 == NB -> BobSuccess = true;
        :: else -> goto err;
        fi;
        EnqueueRcvBuffer(inmsg);
        goto end;
    }

    byte cnt = 0
    do
        :: true ->
            if
                :: EQUAL(receiveBuffer[cnt],sendBuffer[cnt]) ->
                    cnt = cnt + 1;
                    if
                        :: cnt == Num ->
                            BobAgree = true;
                            goto end;
                        :: else -> break;
                    fi;
                :: else -> goto err;
            fi;
    od;
err:
    printf("Bob receive wrong message\n");
end:

}

proctype Eve () {
    Message outmsg,inmsg;
    mtype:VERIFY verifier;
    atomic {

        ch ? IDS,verifier,inmsg;
        COPY(inmsg,outmsg);
        outmsg.receiver = IDB;
        outmsg.key = KPB;
    }
    atomic {
        ch ! IDB,verifier,outmsg;
    }

    atomic {
        ch ? IDS,verifier,inmsg;
        COPY(inmsg,outmsg);
    }
    atomic {
        ch ! IDA,verifier,outmsg;
    }

    atomic {
        ch ? IDS,verifier,inmsg;
        COPY(inmsg,outmsg);
        outmsg.key = KPB;
        outmsg.receiver = IDB;
    }

    atomic {
        ch ! IDB,verifier,outmsg;
    }

}


ltl agreement {
    [] (AliceSuccess && BobSuccess) -> (<> AliceAgree&&BobAgree);
}

init {
    run Alice();
    run Bob();
    run Eve();
}
